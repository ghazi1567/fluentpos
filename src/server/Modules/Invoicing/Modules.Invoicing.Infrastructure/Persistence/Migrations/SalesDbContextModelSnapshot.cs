// <auto-generated />
using System;
using FluentPOS.Modules.Invoicing.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FluentPOS.Modules.Invoicing.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SalesDbContext))]
    partial class SalesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Invoicing")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.IntenalFulfillment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InternalOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NotifyCustomer")
                        .HasColumnType("bit");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Receipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VariantInventoryManagement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InternalOrderId");

                    b.ToTable("Fulfillments", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(23,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalFulfillmentOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("AssignedLocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("CurrentTotalDiscounts")
                        .HasColumnType("decimal(23,2)");

                    b.Property<DateTimeOffset?>("FulfillAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FulfilledBy")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("FulfillmentOrderDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("InternalOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<byte>("OrderStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("OrderType")
                        .HasColumnType("tinyint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("SubtotalPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("TotalDiscounts")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("TotalLineItemsPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<string>("TotalOutstanding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long?>("TotalQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TotalShippingPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("TotalTax")
                        .HasColumnType("decimal(23,2)");

                    b.Property<string>("TrackingCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FulfillmentOrderDestinationId");

                    b.HasIndex("InternalOrderId");

                    b.ToTable("FulfillmentOrders", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalFulfillmentOrderLineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ConfirmedQty")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("FulfillableQuantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("FulfillmentOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InternalFulfillmentOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("InventoryItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LineItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("Rack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("VariantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternalFulfillmentOrderId");

                    b.ToTable("FulfillmentLineItems", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalLineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ConfirmedQty")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FulfillableQuantity")
                        .HasColumnType("int");

                    b.Property<long?>("FulfillmentLineItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("FulfillmentService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FulfillmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GiftCard")
                        .HasColumnType("bit");

                    b.Property<long?>("Grams")
                        .HasColumnType("bigint");

                    b.Property<long?>("IntenalFulfillmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("InternalOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PreTaxPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(23,2)");

                    b.Property<bool?>("ProductExists")
                        .HasColumnType("bit");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool?>("RequiresShipping")
                        .HasColumnType("bit");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Taxable")
                        .HasColumnType("bit");

                    b.Property<string>("TipPaymentGateway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TipPaymentGatewaySpecified")
                        .HasColumnType("bit");

                    b.Property<string>("TipPaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalDiscount")
                        .HasColumnType("decimal(23,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("VariantId")
                        .HasColumnType("bigint");

                    b.Property<string>("VariantInventoryManagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariantTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IntenalFulfillmentId");

                    b.HasIndex("InternalOrderId");

                    b.ToTable("LineItems", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("AppId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrowserIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BuyerAcceptsMarketing")
                        .HasColumnType("bit");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CancelledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CartToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CheckoutId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckoutToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CurrentSubtotalPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("CurrentTotalDiscounts")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("CurrentTotalPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("CurrentTotalTax")
                        .HasColumnType("decimal(23,2)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerLocale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EstimatedTaxes")
                        .HasColumnType("bit");

                    b.Property<string>("FinancialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FulfillmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandingSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatusUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("OrderType")
                        .HasColumnType("tinyint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentGatewayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentmentCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProcessingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferringSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("SubtotalPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TaxExempt")
                        .HasColumnType("bit");

                    b.Property<bool?>("TaxesIncluded")
                        .HasColumnType("bit");

                    b.Property<bool?>("Test")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalDiscounts")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("TotalLineItemsPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<string>("TotalOutstanding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long?>("TotalQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TotalShippingPrice")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("TotalTax")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal?>("TotalTipReceived")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long?>("TotalWeight")
                        .HasColumnType("bigint");

                    b.Property<string>("TrackingCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Orders", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.LoadSheetDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("FulfillmentOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LoadSheetMainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long>("TotalQuantity")
                        .HasColumnType("bigint");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LoadSheetMainId");

                    b.ToTable("LoadSheetDetails", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.LoadSheetMain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PickupAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long>("TotalOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LoadSheetMains", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.OperationCity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanDeliver")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPickup")
                        .HasColumnType("bit");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("OperationCity", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.OrderLogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("FulfillmentOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("InternalOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("OrderLogs", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.POProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(23,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("POProducts", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(23,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(23,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Products", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.PurchaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ApproveBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(23,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrders", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.SyncLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("EntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("RemoteClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SyncLogs", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(23,2)");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("PaymentType")
                        .HasColumnType("tinyint");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TenderedAmount")
                        .HasColumnType("decimal(23,2)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Transactions", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Legacy")
                        .HasColumnType("bit");

                    b.Property<string>("LocalizedCountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedProvinceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupAddressCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("PostexToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostexUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopifyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses", "Invoicing");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.IntenalFulfillment", b =>
                {
                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.InternalOrder", null)
                        .WithMany("Fulfillments")
                        .HasForeignKey("InternalOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalFulfillmentOrder", b =>
                {
                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.InternalAddress", "FulfillmentOrderDestination")
                        .WithMany()
                        .HasForeignKey("FulfillmentOrderDestinationId");

                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.InternalOrder", null)
                        .WithMany("FulfillmentOrders")
                        .HasForeignKey("InternalOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FulfillmentOrderDestination");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalFulfillmentOrderLineItem", b =>
                {
                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.InternalFulfillmentOrder", null)
                        .WithMany("FulfillmentOrderLineItems")
                        .HasForeignKey("InternalFulfillmentOrderId");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalLineItem", b =>
                {
                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.IntenalFulfillment", null)
                        .WithMany("LineItems")
                        .HasForeignKey("IntenalFulfillmentId");

                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.InternalOrder", null)
                        .WithMany("LineItems")
                        .HasForeignKey("InternalOrderId");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalOrder", b =>
                {
                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.InternalAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.LoadSheetDetail", b =>
                {
                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.LoadSheetMain", null)
                        .WithMany("Details")
                        .HasForeignKey("LoadSheetMainId");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.POProduct", b =>
                {
                    b.HasOne("FluentPOS.Modules.Invoicing.Core.Entities.PurchaseOrder", null)
                        .WithMany("Products")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.IntenalFulfillment", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalFulfillmentOrder", b =>
                {
                    b.Navigation("FulfillmentOrderLineItems");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.InternalOrder", b =>
                {
                    b.Navigation("FulfillmentOrders");

                    b.Navigation("Fulfillments");

                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.LoadSheetMain", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("FluentPOS.Modules.Invoicing.Core.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
